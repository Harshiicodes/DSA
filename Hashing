hash function -- that converts a given phone number or any other key to a smaller number and uses the small number as an index in a table called a hash table.

Collision Handling: Since a hash function gets us a small number for a big key, there is a possibility that two keys result in the same value. The situation where a
newly inserted key maps to an already occupied slot in the hash table is called collision and must be handled using some collision handling technique. Following are the
ways to handle collisions:
Chaining:The idea is to make each cell of the hash table point to a linked list of records that have the same hash function value. Chaining is simple, but it requires 
additional memory outside the table.
Open Addressing: In open addressing, all elements are stored in the hash table itself. Each table entry contains either a record or NIL. When searching for an element,
we one by one examine the table slots until the desired element is found or it is clear that the element is not present in the table.

Insert(k): Keep probing until an empty slot is found. Once an empty slot is found, insert k.
Search(k): Keep probing until the slot's key doesn't become equal to k or an empty slot is reached.
Delete(k): Delete operation is interesting. If we simply delete a key, then the search may fail. So slots of the deleted keys are marked specially as "deleted".
Insert can insert an item in a deleted slot, but the search doesn't stop at a deleted slot.

Open Addressing is done in the following ways:
Linear probing
Quadratic probing
Double hashing
Linear Probing: In linear probing, we linearly probe for the next slot. 
If slot hash(x) % S is full, then we try (hash(x) + 1) % S
If (hash(x) + 1) % S is also full, then we try (hash(x) + 2) % S
If (hash(x) + 2) % S is also full, then we try (hash(x) + 3) % S 
Clustering: The main problem with linear probing is clustering, many consecutive elements form groups and it starts taking time to find a free slot or to search an element.
Quadratic Probing We look for i2'th slot in i'th iteration.
let hash(x) be the slot index computed using hash function. If slot hash(x) % S is full, then we try (hash(x) + 1*1) % S If (hash(x) + 1*1) % S is also full, then we try 
(hash(x) + 2*2) % S If (hash(x) + 2*2) % S is also full, then we try (hash(x) + 3*3) % S 
Double Hashing We use another hash function hash2(x) and look for i*hash2(x) slot in i'th rotation.
let hash(x) be the slot index computed using hash function. If slot hash(x) % S is full, then we try (hash(x) + 1*hash2(x)) % S If (hash(x) + 1*hash2(x)) % S is also full,
then we try (hash(x) + 2*hash2(x)) % S If (hash(x) + 2*hash2(x)) % S is also full, then we try (hash(x) + 3*hash2(x)) % S


link for diagrams and detailed exp-  https://www.cse.cuhk.edu.hk/irwin.king/_media/teaching/csc2100b/tu6.pdf

Hashing in C++ using STL
set-- sorted and unique (mplemented as a balanced tree structure) tc--O(logn)       set <int> s;
   fns:
begin() – Returns an iterator to the first element in the set.
end() – Returns an iterator to the theoretical element that follows last element in the set.
size() – Returns the number of elements in the set.
insert(val) – Inserts a new element val in the Set.
find(val) - Returns an iterator pointing to the element val in the set if it is present.
empty() – Returns whether the set is empty.

unordered_set-- unordered and unique tc--O(1)   unordered_set <int> s;         

map-- ordered and unique (key value pair)(mplemented as a balanced tree structure) tc--O(logn)             map<int, int> mp; 
  fns:
begin() – Returns an iterator to the first element in the map.
end() – Returns an iterator to the theoretical element that follows last element in the map.
size() – Returns the number of elements in the map.
empty() – Returns whether the map is empty.
insert({keyvalue, mapvalue}) – Adds a new element to the map.
erase(iterator position) – Removes the element at the position pointed by the iterator
erase(const g)– Removes the key value ‘g’ from the map.
clear() – Removes all the elements from the map.

unordered_map-- unordered and unique (key value pair) tc -O(1)   unordered_map<string, int> umap; 
